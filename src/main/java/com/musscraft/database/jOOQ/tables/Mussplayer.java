/*
 * This file is generated by jOOQ.
 */
package com.musscraft.database.jOOQ.tables;


import com.musscraft.database.jOOQ.Indexes;
import com.musscraft.database.jOOQ.Keys;
import com.musscraft.database.jOOQ.Musscraft;
import com.musscraft.database.jOOQ.tables.records.MussplayerRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Mussplayer extends TableImpl<MussplayerRecord> {

    private static final long serialVersionUID = -1223788783;

    /**
     * The reference instance of <code>MussCraft.MussPlayer</code>
     */
    public static final Mussplayer MUSSPLAYER = new Mussplayer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MussplayerRecord> getRecordType() {
        return MussplayerRecord.class;
    }

    /**
     * The column <code>MussCraft.MussPlayer.UID</code>.
     */
    public final TableField<MussplayerRecord, String> UID = createField("UID", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>MussCraft.MussPlayer.username</code>.
     */
    public final TableField<MussplayerRecord, String> USERNAME = createField("username", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>MussCraft.MussPlayer.password</code>.
     */
    public final TableField<MussplayerRecord, String> PASSWORD = createField("password", org.jooq.impl.SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>MussCraft.MussPlayer.email</code>.
     */
    public final TableField<MussplayerRecord, String> EMAIL = createField("email", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>MussCraft.MussPlayer.money</code>.
     */
    public final TableField<MussplayerRecord, Double> MONEY = createField("money", org.jooq.impl.SQLDataType.DOUBLE.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.DOUBLE)), this, "");

    /**
     * The column <code>MussCraft.MussPlayer.experience</code>.
     */
    public final TableField<MussplayerRecord, Double> EXPERIENCE = createField("experience", org.jooq.impl.SQLDataType.DOUBLE.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.DOUBLE)), this, "");

    /**
     * The column <code>MussCraft.MussPlayer.location</code>.
     */
    public final TableField<MussplayerRecord, String> LOCATION = createField("location", org.jooq.impl.SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>MussCraft.MussPlayer.logged</code>.
     */
    public final TableField<MussplayerRecord, Byte> LOGGED = createField("logged", org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * Create a <code>MussCraft.MussPlayer</code> table reference
     */
    public Mussplayer() {
        this(DSL.name("MussPlayer"), null);
    }

    /**
     * Create an aliased <code>MussCraft.MussPlayer</code> table reference
     */
    public Mussplayer(String alias) {
        this(DSL.name(alias), MUSSPLAYER);
    }

    /**
     * Create an aliased <code>MussCraft.MussPlayer</code> table reference
     */
    public Mussplayer(Name alias) {
        this(alias, MUSSPLAYER);
    }

    private Mussplayer(Name alias, Table<MussplayerRecord> aliased) {
        this(alias, aliased, null);
    }

    private Mussplayer(Name alias, Table<MussplayerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Mussplayer(Table<O> child, ForeignKey<O, MussplayerRecord> key) {
        super(child, key, MUSSPLAYER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Musscraft.MUSSCRAFT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MUSSPLAYER_MUSSPLAYER_UID_UINDEX, Indexes.MUSSPLAYER_MUSSPLAYER_USERNAME_UINDEX, Indexes.MUSSPLAYER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MussplayerRecord> getPrimaryKey() {
        return Keys.KEY_MUSSPLAYER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MussplayerRecord>> getKeys() {
        return Arrays.<UniqueKey<MussplayerRecord>>asList(Keys.KEY_MUSSPLAYER_PRIMARY, Keys.KEY_MUSSPLAYER_MUSSPLAYER_UID_UINDEX, Keys.KEY_MUSSPLAYER_MUSSPLAYER_USERNAME_UINDEX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Mussplayer as(String alias) {
        return new Mussplayer(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Mussplayer as(Name alias) {
        return new Mussplayer(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Mussplayer rename(String name) {
        return new Mussplayer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Mussplayer rename(Name name) {
        return new Mussplayer(name, null);
    }
}
